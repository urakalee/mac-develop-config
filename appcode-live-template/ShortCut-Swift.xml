<templateSet group="ShortCut-Swift">
  <template name="view" value="import UIKit&#10;&#10;class $NAME$: UIView {&#10;    &#10;    // MARK: vars&#10;    &#10;    // MARK: init&#10;&#10;    override init(frame: CGRect) {&#10;        super.init(frame: frame)&#10;        setupUserInterface()&#10;    }&#10;&#10;    required init?(coder aDecoder: NSCoder) {&#10;        fatalError(&quot;init(coder:) has not been implemented&quot;)&#10;    }&#10;    &#10;    fileprivate func setupUserInterface() {&#10;        backgroundColor = UIColor.UI_globalBackgroundColor&#10;        &#10;        // MARK: addSubview&#10;        &#10;        // MARK: layout&#10;        &#10;    }&#10;    &#10;    // MARK: private&#10;&#10;    // MARK: views&#10;}&#10;" description="UIView" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="swift.lang.context" value="true" />
    </context>
  </template>
  <template name="lazylabel" value="fileprivate lazy var $NAME$: UILabel = {&#10;    let label = UILabel()&#10;    return label&#10;}()" description="fileprivate lazy uilabel" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="swift.lang.context" value="true" />
    </context>
  </template>
  <template name="lazyview" value="fileprivate lazy var $NAME$: UIView = {&#10;    let view = UIView()&#10;    return view&#10;}()" description="fileprivate lazy uiview" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="swift.lang.context" value="true" />
    </context>
  </template>
  <template name="reg" value="// MARK: " description="region" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="swift.lang.context" value="true" />
    </context>
  </template>
</templateSet>